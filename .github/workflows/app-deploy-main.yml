name: Build and Deploy only affected Apps to Amazon ECS

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
      
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.S3_BUCKET_REGION }}

jobs:      
  build:
    runs-on: ubuntu-latest
    name: STEP | BUILDING...🔨
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      hasAffected: ${{ steps.checkForAffected.outputs.hasAffected }}
    steps:
      # Settings...
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
            node-version: 18
            
      - name: << Cache node_modules >>      
        id: cache    
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: << Npm install >>      
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: << Set head and base for comparison >>
        uses: nrwl/nx-set-shas@v3
       
      - name: << Build only affected >>
        run: npx nx affected --target=build --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}  

      - name: << Check for affected projects >>
        uses: dkhunt27/action-nx-affected-list@v4
        id: checkForAffected
      
      - name: << Set matrix for next job >> 
        id: set-matrix
        run: echo "matrix={\"affectedApps\":${{ toJSON(steps.checkForAffected.outputs.affectedApps) }}}" >> $GITHUB_OUTPUT
        
      - name: << Upload artifact >>
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/packages/

      - name: << Step results >>
        run: echo "빌드가 완료되었습니다. 빌드된 앱 = ${{ steps.checkForAffected.outputs.affectedApps }}"
      
  test:
    needs: build
    runs-on: ubuntu-latest
    name: STEP | TESTING...💯
    steps:
      - run: echo "Do something..."
      
      - name: << Step results >>
        run: echo "테스트가 완료되었습니다. 100점입니다."   

  deploy:
    needs: [test, build]
    if: needs.build.outputs.hasAffected == 'true'
    runs-on: ubuntu-latest
    name: STEP | DEPLOYING...🎊
    strategy:
        matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - name: << Set ENV for S3 >>
        run: |
          APPNAME=${{ matrix.affectedApps }}
          echo "AWS_S3_BUCKET=peter${APPNAME#app}" >> $GITHUB_ENV
          echo "SOURCE_DIR=./dist/${APPNAME/-/\/}" >> $GITHUB_ENV
          
      - name: << Download artifact >>
        uses: actions/download-artifact@v1
        with:
          name: dist
          
      - name: << Deploy to S3 >>
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
          SOURCE_DIR: ${{ env.SOURCE_DIR }}
          
      - name: << Step results >>
        run: echo "${APPNAME} - 앱 배포가 완료되었습니다." 
        
      
          
